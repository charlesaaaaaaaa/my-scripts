['config', 'sqlfile', 'dbtype'] ['conf/config.conf', 'sql/mysql/aggregate_pushdown.sql', 'mysql']
Namespace(config='conf/config.conf', dbtype='mysql', sqlfile='sql/mysql/aggregate_pushdown.sql')
Converted SQL statement by this script: drop database if exists contrib_regression
Converted SQL statement by this script: create database if not exists contrib_regression
CREATE EXTENSION IF NOT EXISTS mysql_fdw;

========
CREATE SERVER mysql_svr FOREIGN DATA WRAPPER mysql_fdw
  	OPTIONS  (host '192.168.0.136', port  '12388');

========
CREATE USER MAPPING FOR public SERVER mysql_svr
  	OPTIONS  (username 'root', password 'root');

========
CREATE TYPE user_enum AS ENUM ('foo', 'bar', 'buz');

========
CREATE FOREIGN TABLE fdw132_t1(c1 int, c2 int, c3 text COLLATE "C", c4 text COLLATE "C")
  SERVER mysql_svr OPTIONS(dbname 'mysql_fdw_regress', table_name 'test1');

========
CREATE FOREIGN TABLE fdw132_t2(c1 int, c2 int, c3 text COLLATE "C", c4 text COLLATE "C")
  SERVER mysql_svr OPTIONS(dbname 'mysql_fdw_regress', table_name 'test2');

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO fdw132_t1 values(1, 100, 'AAA1', 'foo');
Converted SQL statement by this script: INSERT INTO `test1` values (1, 100, 'AAA1', 'foo') ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO fdw132_t1 values(2, 100, 'AAA2', 'bar');
Converted SQL statement by this script: INSERT INTO `test1` values (2, 100, 'AAA2', 'bar') ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO fdw132_t1 values(11, 100, 'AAA11', 'foo');
Converted SQL statement by this script: INSERT INTO `test1` values (11, 100, 'AAA11', 'foo') ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO fdw132_t2 values(1, 200, 'BBB1', 'foo');
Converted SQL statement by this script: INSERT INTO `test2` values (1, 200, 'BBB1', 'foo') ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO fdw132_t2 values(2, 200, 'BBB2', 'bar');
Converted SQL statement by this script: INSERT INTO `test2` values (2, 200, 'BBB2', 'bar') ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO fdw132_t2 values(12, 200, 'BBB12', 'foo');
Converted SQL statement by this script: INSERT INTO `test2` values (12, 200, 'BBB12', 'foo') ;

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(c1), avg(c1), min(c2), max(c1), sum(c1) * (random() <= 1)::int AS sum2 FROM fdw132_t1 WHERE c2 > 5 GROUP BY c2 ORDER BY 1, 2;

========
SELECT sum(c1), avg(c1), min(c2), max(c1), sum(c1) * (random() <= 1)::int AS sum2 FROM fdw132_t1 WHERE c2 > 5 GROUP BY c2 ORDER BY 1, 2;

 sum |  avg   | min | max | sum2 
-----+--------+-----+-----+------
  14 | 4.6667 | 100 |  11 |   14
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(c1 * (random() <= 1)::int) AS sum, avg(c1) FROM fdw132_t1;

========
SELECT sum(c1 * (random() <= 1)::int) AS sum, avg(c1) FROM fdw132_t1;

 sum |        avg         
-----+--------------------
  14 | 4.6666666666666667
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT count(*), sum(t1.c1), avg(t2.c1) FROM  fdw132_t1 t1 INNER JOIN fdw132_t2 t2 ON (t1.c1 = t2.c1) WHERE t1.c1 = 2;

========
SELECT count(*), sum(t1.c1), avg(t2.c1) FROM  fdw132_t1 t1 INNER JOIN fdw132_t2 t2 ON (t1.c1 = t2.c1) WHERE t1.c1 = 2;

 count | sum |  avg   
-------+-----+--------
     1 |   2 | 2.0000
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(t1.c1), count(t2.c1) FROM fdw132_t1 t1 INNER JOIN fdw132_t2 t2 ON (t1.c1 = t2.c1) WHERE ((t1.c1 * t2.c1)/(t1.c1 * t2.c1)) * random() <= 1;

========
SELECT sum(t1.c1), count(t2.c1) FROM fdw132_t1 t1 INNER JOIN fdw132_t2 t2 ON (t1.c1 = t2.c1) WHERE ((t1.c1 * t2.c1)/(t1.c1 * t2.c1)) * random() <= 1;

 sum | count 
-----+-------
   3 |     2
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2+2, sum(c2) * (c2+2) FROM fdw132_t1 GROUP BY c2+2 ORDER BY c2+2;

========
SELECT c2+2, sum(c2) * (c2+2) FROM fdw132_t1 GROUP BY c2+2 ORDER BY c2+2;

 ?column? | ?column? 
----------+----------
      102 |    30600
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT count(x.a), sum(x.a) FROM (SELECT c2 a, sum(c1) b FROM fdw132_t1 GROUP BY c2 ORDER BY 1, 2) x;

========
SELECT count(x.a), sum(x.a) FROM (SELECT c2 a, sum(c1) b FROM fdw132_t1 GROUP BY c2 ORDER BY 1, 2) x;

 count | sum 
-------+-----
     1 | 100
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2 * (random() <= 1)::int AS sum1, sum(c1) * c2 AS sum2 FROM fdw132_t1 GROUP BY c2 ORDER BY 1, 2;

========
SELECT c2 * (random() <= 1)::int AS sum1, sum(c1) * c2 AS sum2 FROM fdw132_t1 GROUP BY c2 ORDER BY 1, 2;

 sum1 | sum2 
------+------
  100 | 1400
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2 * (random() <= 1)::int AS c2 FROM fdw132_t2 GROUP BY c2 * (random() <= 1)::int ORDER BY 1;

========
SELECT c2 * (random() <= 1)::int AS c2 FROM fdw132_t2 GROUP BY c2 * (random() <= 1)::int ORDER BY 1;

 c2  
-----
 200
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT count(c2) w, c2 x, 5 y, 7.0 z FROM fdw132_t1 GROUP BY 2, y, 9.0::int ORDER BY 2;

========
SELECT count(c2) w, c2 x, 5 y, 7.0 z FROM fdw132_t1 GROUP BY 2, y, 9.0::int ORDER BY 2;

 w |  x  | y |  z  
---+-----+---+-----
 3 | 100 | 5 | 7.0
(1 row)

========
SET enable_sort TO ON;

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2, sum(c1) FROM fdw132_t2 GROUP BY c2 HAVING avg(c1) < 500 and sum(c1) < 49800 ORDER BY c2;

========
SELECT c2, sum(c1) FROM fdw132_t2 GROUP BY c2 HAVING avg(c1) < 500 and sum(c1) < 49800 ORDER BY c2;

 c2  | sum 
-----+-----
 200 |  15
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c3, count(c1) FROM fdw132_t1 GROUP BY c3 HAVING exp(max(c1)) = exp(2) ORDER BY 1, 2;

========
SELECT c3, count(c1) FROM fdw132_t1 GROUP BY c3 HAVING exp(max(c1)) = exp(2) ORDER BY 1, 2;

  c3  | count 
------+-------
 AAA2 |     1
(1 row)

========
SET enable_sort TO off;

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT count(*) FROM (SELECT c3, count(c1) FROM fdw132_t1 GROUP BY c3 HAVING (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;

========
SELECT count(*) FROM (SELECT c3, count(c1) FROM fdw132_t1 GROUP BY c3 HAVING (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;

 count 
-------
     3
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(c1) FROM fdw132_t1 GROUP BY c2 HAVING avg(c1 * (random() <= 1)::int) > 1 ORDER BY 1;

========
SELECT sum(c1) FROM fdw132_t1 GROUP BY c2 HAVING avg(c1 * (random() <= 1)::int) > 1 ORDER BY 1;

 sum 
-----
  14
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(c1 ORDER BY c1) FROM fdw132_t1 WHERE c1 < 100 GROUP BY c2 ORDER BY 1;

========
SELECT sum(c1 ORDER BY c1) FROM fdw132_t1 WHERE c1 < 100 GROUP BY c2 ORDER BY 1;

 sum 
-----
  14
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(c2 ORDER BY c1 desc) FROM fdw132_t2 WHERE c1 > 1 and c2 > 50;

========
SELECT sum(c2 ORDER BY c1 desc) FROM fdw132_t2 WHERE c1 > 1 and c2 > 50;

 sum 
-----
 400
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(DISTINCT (c1)%5) FROM fdw132_t2 WHERE c2 = 200 and c1 < 50;

========
SELECT sum(DISTINCT (c1)%5) FROM fdw132_t2 WHERE c2 = 200 and c1 < 50;

 sum 
-----
   3
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(DISTINCT (t1.c1)%5) FROM fdw132_t1 t1 join fdw132_t2 t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) GROUP BY (t2.c1)%3 ORDER BY 1;

========
SELECT sum(DISTINCT (t1.c1)%5) FROM fdw132_t1 t1 join fdw132_t2 t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) GROUP BY (t2.c1)%3 ORDER BY 1;

 sum 
-----
   1
   2
(2 rows)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(DISTINCT c1) FROM fdw132_t2 WHERE c2 = 200 and c1 < 50;

========
SELECT sum(DISTINCT c1) FROM fdw132_t2 WHERE c2 = 200 and c1 < 50;

 sum 
-----
  15
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT array_agg(DISTINCT (t1.c1)%5 ORDER BY (t1.c1)%5) FROM fdw132_t1 t1 join fdw132_t2 t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) GROUP BY (t2.c1)%3 ORDER BY 1;

========
ERROR:  collation mismatch between implicit collations "utf8mb4_0900_bin" and "C"
LINE 2: ...CT c2, rank('10'::varchar) within group (ORDER BY c3), perce...
                                                             ^
HINT:  You can choose the collation by applying the COLLATE clause to one or both expressions.
SELECT array_agg(DISTINCT (t1.c1)%5 ORDER BY (t1.c1)%5) FROM fdw132_t1 t1 join fdw132_t2 t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) GROUP BY (t2.c1)%3 ORDER BY 1;

 array_agg 
-----------
 {1}
 {2}
(2 rows)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(c1%3), sum(DISTINCT c1%3 ORDER BY c1%3) filter (WHERE c1%3 < 2), c2 FROM fdw132_t1 WHERE c2 = 100 GROUP BY c2;

========
SELECT sum(c1%3), sum(DISTINCT c1%3 ORDER BY c1%3) filter (WHERE c1%3 < 2), c2 FROM fdw132_t1 WHERE c2 = 100 GROUP BY c2;

 sum | sum | c2  
-----+-----+-----
   5 |   1 | 100
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(c1) filter (WHERE c1 < 100 and c2 > 5) FROM fdw132_t1 GROUP BY c2 ORDER BY 1 nulls last;

========
SELECT sum(c1) filter (WHERE c1 < 100 and c2 > 5) FROM fdw132_t1 GROUP BY c2 ORDER BY 1 nulls last;

 sum 
-----
  14
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT DISTINCT (SELECT count(*) filter (WHERE t2.c2 = 200 and t2.c1 < 10) FROM fdw132_t1 t1 WHERE t1.c1 = 2) FROM fdw132_t2 t2 ORDER BY 1;

========
SELECT DISTINCT (SELECT count(*) filter (WHERE t2.c2 = 200 and t2.c1 < 10) FROM fdw132_t1 t1 WHERE t1.c1 = 2) FROM fdw132_t2 t2 ORDER BY 1;

 count 
-------
     2
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT DISTINCT (SELECT count(t1.c1) filter (WHERE t2.c2 = 200 and t2.c1 < 10) FROM fdw132_t1 t1 WHERE t1.c1 = 2) FROM fdw132_t2 t2 ORDER BY 1;

========
SELECT DISTINCT (SELECT count(t1.c1) filter (WHERE t2.c2 = 200 and t2.c1 < 10) FROM fdw132_t1 t1 WHERE t1.c1 = 2) FROM fdw132_t2 t2 ORDER BY 1;

 count 
-------
     0
     1
(2 rows)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2, rank('10'::varchar) within group (ORDER BY c3), percentile_cont(c2/200::numeric) within group (ORDER BY c1) FROM fdw132_t2 GROUP BY c2 HAVING percentile_cont(c2/200::numeric) within group (ORDER BY c1) < 500 ORDER BY c2;

========
SELECT c2, rank('10'::varchar) within group (ORDER BY c3 COLLATE "C"), percentile_cont(c2/200::numeric) within group (ORDER BY c1) FROM fdw132_t2 GROUP BY c2 HAVING percentile_cont(c2/200::numeric) within group (ORDER BY c1) < 500 ORDER BY c2;

 c2  | rank | percentile_cont 
-----+------+-----------------
 200 |    1 |              12
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1, rank(c1, c2) within group (ORDER BY c1, c2) FROM fdw132_t1 GROUP BY c1, c2 HAVING c1 = 2 ORDER BY 1;

========
SELECT c1, rank(c1, c2) within group (ORDER BY c1, c2) FROM fdw132_t1 GROUP BY c1, c2 HAVING c1 = 2 ORDER BY 1;

 c1 | rank 
----+------
  2 |    1
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT count(*), x.b FROM fdw132_t1, (SELECT c1 a, sum(c1) b FROM fdw132_t2 GROUP BY c1) x WHERE fdw132_t1.c1 = x.a GROUP BY x.b ORDER BY 1, 2;

========
SELECT count(*), x.b FROM fdw132_t1, (SELECT c1 a, sum(c1) b FROM fdw132_t2 GROUP BY c1) x WHERE fdw132_t1.c1 = x.a GROUP BY x.b ORDER BY 1, 2;

 count | b 
-------+---
     1 | 1
     1 | 2
(2 rows)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT avg(t1.c1), sum(t2.c1) FROM fdw132_t1 t1 join fdw132_t2 t2 ON (t1.c1 = t2.c1) GROUP BY t2.c1 HAVING (avg(t1.c1) is null and sum(t2.c1) > 10) or sum(t2.c1) is null ORDER BY 1 nulls last, 2;

========
SELECT avg(t1.c1), sum(t2.c1) FROM fdw132_t1 t1 join fdw132_t2 t2 ON (t1.c1 = t2.c1) GROUP BY t2.c1 HAVING (avg(t1.c1) is null and sum(t2.c1) > 10) or sum(t2.c1) is null ORDER BY 1 nulls last, 2;

 avg | sum 
-----+-----
(0 rows)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT sum(c2) * (random() <= 1)::int AS sum FROM fdw132_t1 ORDER BY 1;

========
SELECT sum(c2) * (random() <= 1)::int AS sum FROM fdw132_t1 ORDER BY 1;

 sum 
-----
 300
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2, sum FROM fdw132_t1 t1, lateral (SELECT sum(t2.c1 + t1.c1) sum FROM fdw132_t2 t2 GROUP BY t2.c1) qry WHERE t1.c2 * 2 = qry.sum and t1.c2 > 10 ORDER BY 1;

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT q.b, count(fdw132_t1.c1), sum(q.a) FROM fdw132_t1 left join (SELECT min(13), avg(fdw132_t1.c1), sum(fdw132_t2.c1) FROM fdw132_t1 right join fdw132_t2 ON (fdw132_t1.c1 = fdw132_t2.c1) WHERE fdw132_t1.c1 = 12) q(a, b, c) ON (fdw132_t1.c1 = q.b) WHERE fdw132_t1.c1 between 10 and 15 GROUP BY q.b ORDER BY 1 nulls last, 2;

========
SELECT q.b, count(fdw132_t1.c1), sum(q.a) FROM fdw132_t1 left join (SELECT min(13), avg(fdw132_t1.c1), sum(fdw132_t2.c1) FROM fdw132_t1 right join fdw132_t2 ON (fdw132_t1.c1 = fdw132_t2.c1) WHERE fdw132_t1.c1 = 12) q(a, b, c) ON (fdw132_t1.c1 = q.b) WHERE fdw132_t1.c1 between 10 and 15 GROUP BY q.b ORDER BY 1 nulls last, 2;

 b | count | sum 
---+-------+-----
   |     1 |    
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2, sum(c1) FROM fdw132_t1 WHERE c2 > 3 GROUP BY rollup(c2) ORDER BY 1 nulls last;

========
SELECT c2, sum(c1) FROM fdw132_t1 WHERE c2 > 3 GROUP BY rollup(c2) ORDER BY 1 nulls last;

 c2  | sum 
-----+-----
 100 |  14
     |  14
(2 rows)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2, sum(c1) FROM fdw132_t1 WHERE c2 > 3 GROUP BY cube(c2) ORDER BY 1 nulls last;

========
SELECT c2, sum(c1) FROM fdw132_t1 WHERE c2 > 3 GROUP BY cube(c2) ORDER BY 1 nulls last;

 c2  | sum 
-----+-----
 100 |  14
     |  14
(2 rows)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2, c3, sum(c1) FROM fdw132_t1 WHERE c2 > 3 GROUP BY grouping sets(c2, c3) ORDER BY 1 nulls last, 2 nulls last;

========
SELECT c2, c3, sum(c1) FROM fdw132_t1 WHERE c2 > 3 GROUP BY grouping sets(c2, c3) ORDER BY 1 nulls last, 2 nulls last;

 c2  |  c3   | sum 
-----+-------+-----
 100 |       |  14
     | AAA1  |   1
     | AAA11 |  11
     | AAA2  |   2
(4 rows)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2, sum(c1), grouping(c2) FROM fdw132_t1 WHERE c2 > 3 GROUP BY c2 ORDER BY 1 nulls last;

========
SELECT c2, sum(c1), grouping(c2) FROM fdw132_t1 WHERE c2 > 3 GROUP BY c2 ORDER BY 1 nulls last;

 c2  | sum | grouping 
-----+-----+----------
 100 |  14 |        0
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT DISTINCT sum(c1) s FROM fdw132_t1 WHERE c2 > 6 GROUP BY c2 ORDER BY 1;

========
SELECT DISTINCT sum(c1) s FROM fdw132_t1 WHERE c2 > 6 GROUP BY c2 ORDER BY 1;

 s  
----
 14
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2, sum(c2), count(c2) over (partition by c2%2) FROM fdw132_t1 WHERE c2 > 10 GROUP BY c2 ORDER BY 1;

========
SELECT c2, sum(c2), count(c2) over (partition by c2%2) FROM fdw132_t1 WHERE c2 > 10 GROUP BY c2 ORDER BY 1;

 c2  | sum | count 
-----+-----+-------
 100 | 300 |     1
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2, array_agg(c2) over (partition by c2%2 ORDER BY c2 desc) FROM fdw132_t1 WHERE c2 > 10 GROUP BY c2 ORDER BY 1;

========
SELECT c2, array_agg(c2) over (partition by c2%2 ORDER BY c2 desc) FROM fdw132_t1 WHERE c2 > 10 GROUP BY c2 ORDER BY 1;

 c2  | array_agg 
-----+-----------
 100 | {100}
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2, array_agg(c2) over (partition by c2%2 ORDER BY c2 range between current row and unbounded following) FROM fdw132_t1 WHERE c2 > 10 GROUP BY c2 ORDER BY 1;

========
SELECT c2, array_agg(c2) over (partition by c2%2 ORDER BY c2 range between current row and unbounded following) FROM fdw132_t1 WHERE c2 > 10 GROUP BY c2 ORDER BY 1;

 c2  | array_agg 
-----+-----------
 100 | {100}
(1 row)

========
CREATE FUNCTION least_accum(anyelement, variadic anyarray)
returns anyelement language sql AS
  'SELECT least(\$1, min(\$2[i])) FROM generate_subscripts(\$2,2) g(i)';

========
CREATE aggregate least_agg(variadic items anyarray) (
  stype = anyelement, sfunc = least_accum
);

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2, least_agg(c1) FROM fdw132_t1 GROUP BY c2 ORDER BY c2;

========
SELECT c2, least_agg(c1) FROM fdw132_t1 GROUP BY c2 ORDER BY c2;

 c2  | least_agg 
-----+-----------
 100 |          
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT min(c1), c1 FROM fdw132_t1 GROUP BY c1 ORDER BY c1 LIMIT 1 OFFSET 1;

========
SELECT min(c1), c1 FROM fdw132_t1 GROUP BY c1 ORDER BY c1 LIMIT 1 OFFSET 1;

 min | c1 
-----+----
   2 |  2
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT min(c1), c1 FROM fdw132_t1 GROUP BY c1 ORDER BY c1 LIMIT 0 OFFSET 0;

========
SELECT min(c1), c1 FROM fdw132_t1 GROUP BY c1 ORDER BY c1 LIMIT 0 OFFSET 0;

 min | c1 
-----+----
(0 rows)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT min(c1), c1 FROM fdw132_t1 GROUP BY c1 ORDER BY c1 LIMIT NULL OFFSET 2;

========
SELECT min(c1), c1 FROM fdw132_t1 GROUP BY c1 ORDER BY c1 LIMIT NULL OFFSET 2;

 min | c1 
-----+----
  11 | 11
(1 row)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT min(c1), c1 FROM fdw132_t1 GROUP BY c1 ORDER BY c1 LIMIT ALL OFFSET 2;

========
SELECT min(c1), c1 FROM fdw132_t1 GROUP BY c1 ORDER BY c1 LIMIT ALL OFFSET 2;

 min | c1 
-----+----
  11 | 11
(1 row)

========
mysql - dbname = mysql_fdw_regress; src_pgsql = DELETE FROM fdw132_t1;
Converted SQL statement by this script: DELETE FROM `test1`   ;
========
mysql - dbname = mysql_fdw_regress; src_pgsql = DELETE FROM fdw132_t2;
Converted SQL statement by this script: DELETE FROM `test2`   ;
========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO fdw132_t1 values(1, 1, 'AAA1', 'foo');
Converted SQL statement by this script: INSERT INTO `test1` values (1, 1, 'AAA1', 'foo') ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO fdw132_t1 values(2, 2, 'AAA2', 'bar');
Converted SQL statement by this script: INSERT INTO `test1` values (2, 2, 'AAA2', 'bar') ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO fdw132_t2 values(3, 3, 'AAA11', 'foo');
Converted SQL statement by this script: INSERT INTO `test2` values (3, 3, 'AAA11', 'foo') ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO fdw132_t2 values(4, 4, 'AAA12', 'foo');
Converted SQL statement by this script: INSERT INTO `test2` values (4, 4, 'AAA12', 'foo') ;

========
SET enable_partitionwise_aggregate TO on;

========
CREATE TABLE fprt1 (c1 int, c2 int, c3 varchar, c4 varchar) PARTITION BY RANGE(c1);

========
CREATE FOREIGN TABLE ftprt1_p1 PARTITION OF fprt1 FOR VALUES FROM (1) TO (2)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_regress', table_name 'test1');

========
CREATE FOREIGN TABLE ftprt1_p2 PARTITION OF fprt1 FOR VALUES FROM (3) TO (4)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_regress', TABLE_NAME 'test2');

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1, sum(c1) FROM fprt1 GROUP BY c1 ORDER BY 2;

========
SELECT c1, sum(c1) FROM fprt1 GROUP BY c1 ORDER BY 2;

 c1 | sum 
----+-----
  1 |   1
  2 |   2
  3 |   3
  4 |   4
(4 rows)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1, sum(c2), min(c2), count(*) FROM fprt1 GROUP BY c1 HAVING avg(c2) < 22 ORDER BY 2;

========
SELECT c1, sum(c2), min(c2), count(*) FROM fprt1 GROUP BY c1 HAVING avg(c2) < 22 ORDER BY 1;

 c1 | sum | min | count 
----+-----+-----+-------
  1 |   1 |   1 |     1
  2 |   2 |   2 |     1
  3 |   3 |   3 |     1
  4 |   4 |   4 |     1
(4 rows)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1, count(t1) FROM fprt1 t1 GROUP BY c1 HAVING avg(c2) < 22 ORDER BY 1;

========
SELECT c1, count(t1) FROM fprt1 t1 GROUP BY c1 HAVING avg(c2) < 22 ORDER BY 1;

 c1 | count 
----+-------
  1 |     1
  2 |     1
  3 |     1
  4 |     1
(4 rows)

========
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c2, avg(c1), max(c1), count(*) FROM fprt1 GROUP BY c2 HAVING sum(c1) < 700 ORDER BY 1;

========
SELECT c2, avg(c1), max(c1), count(*) FROM fprt1 GROUP BY c2 HAVING sum(c1) < 700 ORDER BY 1;

 c2 |          avg           | max | count 
----+------------------------+-----+-------
  1 | 1.00000000000000000000 |   1 |     1
  2 |     2.0000000000000000 |   2 |     1
  3 |     3.0000000000000000 |   3 |     1
  4 |     4.0000000000000000 |   4 |     1
(4 rows)

========
SET enable_partitionwise_aggregate TO off;

========
DROP aggregate least_agg(variadic items anyarray);

========
DROP FUNCTION least_accum(anyelement, variadic anyarray);

========
mysql - dbname = mysql_fdw_regress; src_pgsql = DELETE FROM fdw132_t1;
Converted SQL statement by this script: DELETE FROM `test1`   ;
========
mysql - dbname = mysql_fdw_regress; src_pgsql = DELETE FROM fdw132_t2;
Converted SQL statement by this script: DELETE FROM `test2`   ;
========
DROP FOREIGN TABLE fdw132_t1;

========
DROP FOREIGN TABLE fdw132_t2;

========
DROP FOREIGN TABLE ftprt1_p1;

========
DROP FOREIGN TABLE ftprt1_p2;

========
DROP TABLE IF EXISTS fprt1;

========
DROP TYPE user_enum;

========
DROP USER MAPPING FOR public SERVER mysql_svr;

========
DROP SERVER mysql_svr;

========
DROP EXTENSION mysql_fdw;

========
