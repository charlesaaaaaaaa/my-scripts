['config', 'sqlfile', 'dbtype'] ['conf/config.conf', 'sql/mysql/pushdown.sql', 'mysql']
Namespace(config='conf/config.conf', dbtype='mysql', sqlfile='sql/mysql/pushdown.sql')
Converted SQL statement by this script: drop database if exists contrib_regression
Converted SQL statement by this script: create database if not exists contrib_regression
CREATE EXTENSION IF NOT EXISTS mysql_fdw;

========
CREATE SERVER mysql_svr FOREIGN DATA WRAPPER mysql_fdw
  	OPTIONS  (host '192.168.0.136', port  '12388');

========
CREATE USER MAPPING FOR public SERVER mysql_svr
  	OPTIONS  (username 'root', password 'root');

========
CREATE FOREIGN TABLE f_test_tbl1 (c1 INTEGER, c2 VARCHAR(10), c3 CHAR(9), c4 BIGINT, c5 pg_catalog.Date, c6 DECIMAL, c7 INTEGER, c8 SMALLINT)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_regress', table_name 'test_tbl1');

========
CREATE FOREIGN TABLE f_test_tbl2 (c1 INTEGER, c2 VARCHAR(14), c3 VARCHAR(13))
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_regress', table_name 'test_tbl2');

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (100, 'EMP1', 'ADMIN', 1300, '1980-12-17', 800.23, NULL, 20);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (100, 'EMP1', 'ADMIN', 1300, '1980-12-17', '800.23', NULL, 20) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (200, 'EMP2', 'SALESMAN', 600, '1981-02-20', 1600.00, 300, 30);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (200, 'EMP2', 'SALESMAN', 600, '1981-02-20', '1600.00', 300, 30) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (300, 'EMP3', 'SALESMAN', 600, '1981-02-22', 1250, 500, 30);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (300, 'EMP3', 'SALESMAN', 600, '1981-02-22', 1250, 500, 30) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (400, 'EMP4', 'MANAGER', 900, '1981-04-02', 2975.12, NULL, 20);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (400, 'EMP4', 'MANAGER', 900, '1981-04-02', '2975.12', NULL, 20) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (500, 'EMP5', 'SALESMAN', 600, '1981-09-28', 1250, 1400, 30);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (500, 'EMP5', 'SALESMAN', 600, '1981-09-28', 1250, 1400, 30) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (600, 'EMP6', 'MANAGER', 900, '1981-05-01', 2850, NULL, 30);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (600, 'EMP6', 'MANAGER', 900, '1981-05-01', 2850, NULL, 30) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (700, 'EMP7', 'MANAGER', 900, '1981-06-09', 2450.45, NULL, 10);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (700, 'EMP7', 'MANAGER', 900, '1981-06-09', '2450.45', NULL, 10) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (800, 'EMP8', 'FINANCE', 400, '1987-04-19', 3000, NULL, 20);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (800, 'EMP8', 'FINANCE', 400, '1987-04-19', 3000, NULL, 20) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (900, 'EMP9', 'HEAD', NULL, '1981-11-17', 5000, NULL, 10);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (900, 'EMP9', 'HEAD', NULL, '1981-11-17', 5000, NULL, 10) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (1000, 'EMP10', 'SALESMAN', 600, '1980-09-08', 1500, 0, 30);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (1000, 'EMP10', 'SALESMAN', 600, '1980-09-08', 1500, 0, 30) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (1100, 'EMP11', 'ADMIN', 800, '1987-05-23', 1100, NULL, 20);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (1100, 'EMP11', 'ADMIN', 800, '1987-05-23', 1100, NULL, 20) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (1200, 'EMP12', 'ADMIN', 600, '1981-12-03', 950, NULL, 30);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (1200, 'EMP12', 'ADMIN', 600, '1981-12-03', 950, NULL, 30) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (1300, 'EMP13', 'FINANCE', 400, '1981-12-03', 3000, NULL, 20);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (1300, 'EMP13', 'FINANCE', 400, '1981-12-03', 3000, NULL, 20) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl1 VALUES (1400, 'EMP14', 'ADMIN', 700, '1982-01-23', 1300, NULL, 10);
Converted SQL statement by this script: INSERT INTO `test_tbl1` VALUES (1400, 'EMP14', 'ADMIN', 700, '1982-01-23', 1300, NULL, 10) ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl2 VALUES(10, 'DEVELOPMENT', 'PUNE');
Converted SQL statement by this script: INSERT INTO `test_tbl2` VALUES (10, 'DEVELOPMENT', 'PUNE') ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl2 VALUES(20, 'ADMINISTRATION', 'BANGLORE');
Converted SQL statement by this script: INSERT INTO `test_tbl2` VALUES (20, 'ADMINISTRATION', 'BANGLORE') ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl2 VALUES(30, 'SALES', 'MUMBAI');
Converted SQL statement by this script: INSERT INTO `test_tbl2` VALUES (30, 'SALES', 'MUMBAI') ;

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_test_tbl2 VALUES(40, 'HR', 'NAGPUR');
Converted SQL statement by this script: INSERT INTO `test_tbl2` VALUES (40, 'HR', 'NAGPUR') ;

========
SET datestyle TO ISO;

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6 AS "salary", c8 FROM f_test_tbl1 e
  WHERE c6 IN (800,2450)
  ORDER BY c1;

========
SELECT c1, c2, c6 AS "salary", c8 FROM f_test_tbl1 e
  WHERE c6 IN (800,2450)
  ORDER BY c1;

 c1 | c2 | salary | c8 
----+----+--------+----
(0 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_test_tbl1 e
  WHERE c6 > 3000
  ORDER BY c1;

========
SELECT * FROM f_test_tbl1 e
  WHERE c6 > 3000
  ORDER BY c1;

 c1  |  c2  |    c3     | c4 |     c5     |     c6     | c7 | c8 
-----+------+-----------+----+------------+------------+----+----
 900 | EMP9 | HEAD      |    | 1981-11-17 | 5000.00000 |    | 10
(1 row)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c6 = 1500
  ORDER BY c1;

========
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c6 = 1500
  ORDER BY c1;

  c1  |  c2   |     c6     | c8 
------+-------+------------+----
 1000 | EMP10 | 1500.00000 | 30
(1 row)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c6 BETWEEN 1000 AND 4000
  ORDER BY c1;

========
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c6 BETWEEN 1000 AND 4000
  ORDER BY c1;

  c1  |  c2   |     c6     | c8 
------+-------+------------+----
  200 | EMP2  | 1600.00000 | 30
  300 | EMP3  | 1250.00000 | 30
  400 | EMP4  | 2975.12000 | 20
  500 | EMP5  | 1250.00000 | 30
  600 | EMP6  | 2850.00000 | 30
  700 | EMP7  | 2450.45000 | 10
  800 | EMP8  | 3000.00000 | 20
 1000 | EMP10 | 1500.00000 | 30
 1100 | EMP11 | 1100.00000 | 20
 1300 | EMP13 | 3000.00000 | 20
 1400 | EMP14 | 1300.00000 | 10
(11 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IS NOT NULL
  ORDER BY c1;

========
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IS NOT NULL
  ORDER BY c1;

  c1  |  c2   |     c6     | c8 
------+-------+------------+----
  100 | EMP1  |  800.23000 | 20
  200 | EMP2  | 1600.00000 | 30
  300 | EMP3  | 1250.00000 | 30
  400 | EMP4  | 2975.12000 | 20
  500 | EMP5  | 1250.00000 | 30
  600 | EMP6  | 2850.00000 | 30
  700 | EMP7  | 2450.45000 | 10
  800 | EMP8  | 3000.00000 | 20
  900 | EMP9  | 5000.00000 | 10
 1000 | EMP10 | 1500.00000 | 30
 1100 | EMP11 | 1100.00000 | 20
 1200 | EMP12 |  950.00000 | 30
 1300 | EMP13 | 3000.00000 | 20
 1400 | EMP14 | 1300.00000 | 10
(14 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_test_tbl1 e
  WHERE c5 <= '1980-12-17'
  ORDER BY c1;

========
SELECT * FROM f_test_tbl1 e
  WHERE c5 <= '1980-12-17'
  ORDER BY c1;

  c1  |  c2   |    c3     |  c4  |     c5     |     c6     | c7 | c8 
------+-------+-----------+------+------------+------------+----+----
  100 | EMP1  | ADMIN     | 1300 | 1980-12-17 |  800.23000 |    | 20
 1000 | EMP10 | SALESMAN  |  600 | 1980-09-08 | 1500.00000 |  0 | 30
(2 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IN ('EMP6', 'EMP12', 'EMP5')
  ORDER BY c1;

========
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IN ('EMP6', 'EMP12', 'EMP5')
  ORDER BY c1;

  c1  |  c2   |     c6     | c8 
------+-------+------------+----
  500 | EMP5  | 1250.00000 | 30
  600 | EMP6  | 2850.00000 | 30
 1200 | EMP12 |  950.00000 | 30
(3 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IN ('EMP6', 'EMP12', 'EMP5')
  ORDER BY c1;

========
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c2 IN ('EMP6', 'EMP12', 'EMP5')
  ORDER BY c1;

  c1  |  c2   |     c6     | c8 
------+-------+------------+----
  500 | EMP5  | 1250.00000 | 30
  600 | EMP6  | 2850.00000 | 30
 1200 | EMP12 |  950.00000 | 30
(3 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c3 LIKE 'SALESMAN'
  ORDER BY c1;

========
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c3 = 'SALESMAN'
  ORDER BY c1;

  c1  |  c2   |     c6     | c8 
------+-------+------------+----
  200 | EMP2  | 1600.00000 | 30
  300 | EMP3  | 1250.00000 | 30
  500 | EMP5  | 1250.00000 | 30
 1000 | EMP10 | 1500.00000 | 30
(4 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c3 LIKE 'MANA%'
  ORDER BY c1;

========
SELECT c1, c2, c6, c8 FROM f_test_tbl1 e
  WHERE c3 LIKE 'MANA%'
  ORDER BY c1;

 c1  |  c2  |     c6     | c8 
-----+------+------------+----
 400 | EMP4 | 2975.12000 | 20
 600 | EMP6 | 2850.00000 | 30
 700 | EMP7 | 2450.45000 | 10
(3 rows)

========
CREATE FOREIGN TABLE f_distinct_test (id int, c1 int, c2 int, c3 text, c4 text)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_regress', table_name 'distinct_test');

========
mysql - dbname = mysql_fdw_regress; src_pgsql = INSERT INTO f_distinct_test VALUES
  (1, 1, 1, 'abc', 'abc'),
  (2, 2, NULL, 'abc', 'NULL'),
  (3, NULL, NULL, 'NULL', 'NULL'),
  (4, 3, 4, 'abc', 'pqr'),
  (5, 4, 5, 'abc', 'abc'),
  (6, 5, 5, 'abc', 'pqr');
Converted SQL statement by this script: INSERT INTO `distinct_test` VALUES (1, 1, 1, 'abc', 'abc'),(2, 2, NULL, 'abc', 'NULL'),(3, NULL, NULL, 'NULL', 'NULL'),(4, 3, 4, 'abc', 'pqr'),(5, 4, 5, 'abc', 'abc'),(6, 5, 5, 'abc', 'pqr') ;

========
SELECT * FROM f_distinct_test ORDER BY id;

 id | c1 | c2 |  c3  |  c4  
----+----+----+------+------
  1 |  1 |  1 | abc  | abc
  2 |  2 |    | abc  | NULL
  3 |    |    | NULL | NULL
  4 |  3 |  4 | abc  | pqr
  5 |  4 |  5 | abc  | abc
  6 |  5 |  5 | abc  | pqr
(6 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_distinct_test WHERE (c1) IS DISTINCT FROM (c2)
  ORDER BY id;

========
SELECT * FROM f_distinct_test WHERE (c1) IS DISTINCT FROM (c2)
  ORDER BY id;

 id | c1 | c2 | c3  |  c4  
----+----+----+-----+------
  2 |  2 |    | abc | NULL
  4 |  3 |  4 | abc | pqr
  5 |  4 |  5 | abc | abc
(3 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_distinct_test WHERE (c1) IS NOT DISTINCT FROM (c2)
  ORDER BY id;

========
SELECT * FROM f_distinct_test WHERE (c1) IS NOT DISTINCT FROM (c2)
  ORDER BY id;

 id | c1 | c2 |  c3  |  c4  
----+----+----+------+------
  1 |  1 |  1 | abc  | abc
  3 |    |    | NULL | NULL
  6 |  5 |  5 | abc  | pqr
(3 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_distinct_test WHERE (c3) IS DISTINCT FROM (c4)
  ORDER BY id;

========
SELECT * FROM f_distinct_test WHERE (c3) IS DISTINCT FROM (c4)
  ORDER BY id;

 id | c1 | c2 | c3  |  c4  
----+----+----+-----+------
  2 |  2 |    | abc | NULL
  4 |  3 |  4 | abc | pqr
  6 |  5 |  5 | abc | pqr
(3 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_distinct_test WHERE (c3) IS NOT DISTINCT FROM (c4)
  ORDER BY id;

========
SELECT * FROM f_distinct_test WHERE (c3) IS NOT DISTINCT FROM (c4)
  ORDER BY id;

 id | c1 | c2 |  c3  |  c4  
----+----+----+------+------
  1 |  1 |  1 | abc  | abc
  3 |    |    | NULL | NULL
  5 |  4 |  5 | abc  | abc
(3 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_distinct_test
  WHERE (c1) IS DISTINCT FROM (c2) and (c3) IS NOT DISTINCT FROM (c4)
  ORDER BY id;

========
SELECT * FROM f_distinct_test
  WHERE (c1) IS DISTINCT FROM (c2) and (c3) IS NOT DISTINCT FROM (c4)
  ORDER BY id;

 id | c1 | c2 | c3  | c4  
----+----+----+-----+-----
  5 |  4 |  5 | abc | abc
(1 row)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_distinct_test
  WHERE (c1) IS NOT DISTINCT FROM (c2) or (c3) IS DISTINCT FROM (c4)
  ORDER BY id;

========
SELECT * FROM f_distinct_test
  WHERE (c1) IS NOT DISTINCT FROM (c2) or (c3) IS DISTINCT FROM (c4)
  ORDER BY id;

 id | c1 | c2 |  c3  |  c4  
----+----+----+------+------
  1 |  1 |  1 | abc  | abc
  2 |  2 |    | abc  | NULL
  3 |    |    | NULL | NULL
  4 |  3 |  4 | abc  | pqr
  6 |  5 |  5 | abc  | pqr
(5 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_distinct_test
  WHERE ((c1) IS NOT DISTINCT FROM (c2)) IS DISTINCT FROM ((c3) IS NOT DISTINCT FROM (c4))
  ORDER BY id;

========
SELECT * FROM f_distinct_test
  WHERE ((c1) IS NOT DISTINCT FROM (c2)) IS DISTINCT FROM ((c3) IS NOT DISTINCT FROM (c4))
  ORDER BY id;

 id | c1 | c2 | c3  | c4  
----+----+----+-----+-----
  5 |  4 |  5 | abc | abc
  6 |  5 |  5 | abc | pqr
(2 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_distinct_test
  WHERE ((c1) IS DISTINCT FROM (c2)) IS NOT DISTINCT FROM ((c3) IS DISTINCT FROM (c4))
  ORDER BY id;

========
SELECT * FROM f_distinct_test
  WHERE ((c1) IS DISTINCT FROM (c2)) IS NOT DISTINCT FROM ((c3) IS DISTINCT FROM (c4))
  ORDER BY id;

 id | c1 | c2 |  c3  |  c4  
----+----+----+------+------
  1 |  1 |  1 | abc  | abc
  2 |  2 |    | abc  | NULL
  3 |    |    | NULL | NULL
  4 |  3 |  4 | abc  | pqr
(4 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_distinct_test
  WHERE ((c1) IS NOT DISTINCT FROM (c2)) IS DISTINCT FROM ((c3) IS DISTINCT FROM (c4))
  ORDER BY id;

========
SELECT * FROM f_distinct_test
  WHERE ((c1) IS NOT DISTINCT FROM (c2)) IS DISTINCT FROM ((c3) IS DISTINCT FROM (c4))
  ORDER BY id;

 id | c1 | c2 |  c3  |  c4  
----+----+----+------+------
  1 |  1 |  1 | abc  | abc
  2 |  2 |    | abc  | NULL
  3 |    |    | NULL | NULL
  4 |  3 |  4 | abc  | pqr
(4 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_distinct_test
  WHERE ((c1) IS DISTINCT FROM (c2)) IS NOT DISTINCT FROM ((c3) IS NOT DISTINCT FROM (c4))
  ORDER BY id;

========
SELECT * FROM f_distinct_test
  WHERE ((c1) IS DISTINCT FROM (c2)) IS NOT DISTINCT FROM ((c3) IS NOT DISTINCT FROM (c4))
  ORDER BY id;

 id | c1 | c2 | c3  | c4  
----+----+----+-----+-----
  5 |  4 |  5 | abc | abc
  6 |  5 |  5 | abc | pqr
(2 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_distinct_test
  WHERE ((c1) IS DISTINCT FROM (c2)) IS DISTINCT FROM ((c3) IS NOT DISTINCT FROM (c4))
  ORDER BY id;

========
SELECT * FROM f_distinct_test
  WHERE ((c1) IS DISTINCT FROM (c2)) IS DISTINCT FROM ((c3) IS NOT DISTINCT FROM (c4))
  ORDER BY id;

 id | c1 | c2 |  c3  |  c4  
----+----+----+------+------
  1 |  1 |  1 | abc  | abc
  2 |  2 |    | abc  | NULL
  3 |    |    | NULL | NULL
  4 |  3 |  4 | abc  | pqr
(4 rows)

========
EXPLAIN (VERBOSE, COSTS FALSE)
SELECT * FROM f_distinct_test
  WHERE ((c1) IS NOT DISTINCT FROM (c2)) IS NOT DISTINCT FROM ((c3) IS DISTINCT FROM (c4))
  ORDER BY id;

========
SELECT * FROM f_distinct_test
  WHERE ((c1) IS NOT DISTINCT FROM (c2)) IS NOT DISTINCT FROM ((c3) IS DISTINCT FROM (c4))
  ORDER BY id;

 id | c1 | c2 | c3  | c4  
----+----+----+-----+-----
  5 |  4 |  5 | abc | abc
  6 |  5 |  5 | abc | pqr
(2 rows)

========
CREATE OPERATOR PUBLIC.<^ (
  LEFTARG = INT4,
  RIGHTARG = INT4,
  PROCEDURE = INT4EQ
);

========
CREATE OPERATOR PUBLIC.=^ (
  LEFTARG = INT4,
  RIGHTARG = INT4,
  PROCEDURE = INT4LT
);

========
CREATE OPERATOR PUBLIC.>^ (
  LEFTARG = INT4,
  RIGHTARG = INT4,
  PROCEDURE = INT4GT
);

========
CREATE OPERATOR FAMILY my_op_family USING btree;

========
